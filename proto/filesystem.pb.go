// Code generated by protoc-gen-go.
// source: proto/filesystem.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The type of this particular node.
type Node_Kind int32

const (
	// For future compatibility.
	Node_UNKNOWN Node_Kind = 0
	// A single file.
	Node_FILE Node_Kind = 1
	// A directory listing.
	Node_DIR Node_Kind = 2
)

var Node_Kind_name = map[int32]string{
	0: "UNKNOWN",
	1: "FILE",
	2: "DIR",
}
var Node_Kind_value = map[string]int32{
	"UNKNOWN": 0,
	"FILE":    1,
	"DIR":     2,
}

func (x Node_Kind) String() string {
	return proto1.EnumName(Node_Kind_name, int32(x))
}
func (Node_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

type Node struct {
	// Base name of node.
	Name string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Kind Node_Kind `protobuf:"varint,2,opt,name=kind,enum=fproxy.Node_Kind" json:"kind,omitempty"`
	// Nested children of the node. Will be set iff kind == DIR.
	Child []*Node `protobuf:"bytes,3,rep,name=child" json:"child,omitempty"`
	// Size in bytes. Will be set iff kind == FILE.
	SizeBytes int64 `protobuf:"varint,4,opt,name=size_bytes" json:"size_bytes,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto1.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Node) GetChild() []*Node {
	if m != nil {
		return m.Child
	}
	return nil
}

func init() {
	proto1.RegisterType((*Node)(nil), "fproxy.Node")
	proto1.RegisterEnum("fproxy.Node_Kind", Node_Kind_name, Node_Kind_value)
}

var fileDescriptor2 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xcb, 0xcc, 0x49, 0x2d, 0xae, 0x2c, 0x2e, 0x49, 0xcd, 0xd5, 0x03, 0x0b, 0x08,
	0xb1, 0xa5, 0x01, 0xe9, 0x8a, 0x4a, 0xa5, 0x35, 0x8c, 0x5c, 0x2c, 0x7e, 0xf9, 0x29, 0xa9, 0x42,
	0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6,
	0x90, 0x2a, 0x17, 0x4b, 0x76, 0x66, 0x5e, 0x8a, 0x04, 0x13, 0x50, 0x8c, 0xcf, 0x48, 0x50, 0x0f,
	0xa2, 0x47, 0x0f, 0xa4, 0x5e, 0xcf, 0x1b, 0x28, 0x11, 0x04, 0x96, 0x16, 0x52, 0xe2, 0x62, 0x4d,
	0xce, 0xc8, 0xcc, 0x49, 0x91, 0x60, 0x56, 0x60, 0xd6, 0xe0, 0x36, 0xe2, 0x41, 0x56, 0x17, 0x04,
	0x91, 0x12, 0x92, 0xe5, 0xe2, 0x2a, 0xce, 0xac, 0x4a, 0x8d, 0x4f, 0xaa, 0x2c, 0x49, 0x2d, 0x96,
	0x60, 0x01, 0x1a, 0xc8, 0x1c, 0xc4, 0x09, 0x12, 0x71, 0x02, 0x09, 0x28, 0xa9, 0x71, 0xb1, 0x80,
	0x0c, 0x14, 0xe2, 0xe6, 0x62, 0x0f, 0xf5, 0xf3, 0xf6, 0xf3, 0x0f, 0xf7, 0x13, 0x60, 0x10, 0xe2,
	0xe0, 0x62, 0x71, 0xf3, 0xf4, 0x71, 0x15, 0x60, 0x14, 0x62, 0xe7, 0x62, 0x76, 0xf1, 0x0c, 0x12,
	0x60, 0x72, 0x62, 0x8f, 0x62, 0x05, 0xbb, 0x3f, 0x89, 0x0d, 0x4c, 0x19, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xb0, 0x2a, 0x2d, 0x85, 0xe0, 0x00, 0x00, 0x00,
}
