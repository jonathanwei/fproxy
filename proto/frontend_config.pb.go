// Code generated by protoc-gen-go.
// source: proto/frontend_config.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FrontendConfig struct {
	// Configuration for the frontend's TCP proxy. Can be left unset if a TCP
	// proxy is not required.
	TcpProxyRoute []*TCPProxyRoute `protobuf:"bytes,1,rep,name=tcp_proxy_route" json:"tcp_proxy_route,omitempty"`
	// TODO: make this repeated.
	BackendAddr string `protobuf:"bytes,2,opt,name=backend_addr" json:"backend_addr,omitempty"`
	// The address to listen on for HTTP requests.
	HttpAddr string `protobuf:"bytes,3,opt,name=http_addr" json:"http_addr,omitempty"`
}

func (m *FrontendConfig) Reset()                    { *m = FrontendConfig{} }
func (m *FrontendConfig) String() string            { return proto1.CompactTextString(m) }
func (*FrontendConfig) ProtoMessage()               {}
func (*FrontendConfig) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *FrontendConfig) GetTcpProxyRoute() []*TCPProxyRoute {
	if m != nil {
		return m.TcpProxyRoute
	}
	return nil
}

type TCPProxyRoute struct {
	// Address to listen on.
	Listen string `protobuf:"bytes,1,opt,name=listen" json:"listen,omitempty"`
	// Address to proxy connections to.
	Dial string `protobuf:"bytes,2,opt,name=dial" json:"dial,omitempty"`
}

func (m *TCPProxyRoute) Reset()                    { *m = TCPProxyRoute{} }
func (m *TCPProxyRoute) String() string            { return proto1.CompactTextString(m) }
func (*TCPProxyRoute) ProtoMessage()               {}
func (*TCPProxyRoute) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func init() {
	proto1.RegisterType((*FrontendConfig)(nil), "fproxy.FrontendConfig")
	proto1.RegisterType((*TCPProxyRoute)(nil), "fproxy.TCPProxyRoute")
}

var fileDescriptor4 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x2b, 0xca, 0xcf, 0x2b, 0x49, 0xcd, 0x4b, 0x89, 0x4f, 0xce, 0xcf, 0x4b, 0xcb,
	0x4c, 0xd7, 0x03, 0x8b, 0x0a, 0xb1, 0xa5, 0x01, 0xe9, 0x8a, 0x4a, 0xa5, 0x7e, 0x46, 0x2e, 0x3e,
	0x37, 0xa8, 0x0a, 0x67, 0xb0, 0x02, 0x21, 0x5b, 0x2e, 0xfe, 0x92, 0xe4, 0x82, 0x78, 0xb0, 0x7c,
	0x7c, 0x51, 0x7e, 0x69, 0x49, 0xaa, 0x04, 0xa3, 0x02, 0xb3, 0x06, 0xb7, 0x91, 0xa8, 0x1e, 0x44,
	0x93, 0x5e, 0x88, 0x73, 0x40, 0x00, 0x88, 0x11, 0x04, 0x92, 0x0c, 0xe2, 0x05, 0xaa, 0x46, 0x70,
	0x85, 0x14, 0xb9, 0x78, 0x92, 0x12, 0x93, 0xb3, 0x41, 0x36, 0x26, 0xa6, 0xa4, 0x14, 0x49, 0x30,
	0x29, 0x30, 0x6a, 0x70, 0x06, 0x71, 0x43, 0xc5, 0x1c, 0x81, 0x42, 0x42, 0xd2, 0x5c, 0x9c, 0x19,
	0x25, 0x25, 0x05, 0x10, 0x79, 0x66, 0xb0, 0x3c, 0x07, 0x48, 0x00, 0x24, 0xa9, 0x64, 0xcd, 0xc5,
	0x8b, 0x62, 0xbe, 0x90, 0x18, 0x17, 0x5b, 0x4e, 0x66, 0x31, 0xd0, 0x81, 0x40, 0x67, 0x80, 0x94,
	0x42, 0x79, 0x42, 0x42, 0x5c, 0x2c, 0x29, 0x99, 0x89, 0x39, 0x50, 0x0b, 0xc0, 0x6c, 0x27, 0xf6,
	0x28, 0x56, 0xb0, 0xff, 0x92, 0xd8, 0xc0, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x1a,
	0x0b, 0xd4, 0x05, 0x01, 0x00, 0x00,
}
