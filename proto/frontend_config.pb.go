// Code generated by protoc-gen-go.
// source: proto/frontend_config.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FrontendConfig struct {
	TcpProxyRoute      []*TCPProxyRoute          `protobuf:"bytes,1,rep,name=tcp_proxy_route" json:"tcp_proxy_route,omitempty"`
	ServerAddr         string                    `protobuf:"bytes,2,opt,name=server_addr" json:"server_addr,omitempty"`
	Backend            []*FrontendConfig_Backend `protobuf:"bytes,3,rep,name=backend" json:"backend,omitempty"`
	OauthConfig        *OauthConfig              `protobuf:"bytes,4,opt,name=oauth_config" json:"oauth_config,omitempty"`
	AuthCookieKey      []byte                    `protobuf:"bytes,5,opt,name=auth_cookie_key,proto3" json:"auth_cookie_key,omitempty"`
	AuthCookieInsecure bool                      `protobuf:"varint,6,opt,name=auth_cookie_insecure" json:"auth_cookie_insecure,omitempty"`
	EmailToUserId      map[string]string         `protobuf:"bytes,7,rep,name=email_to_user_id" json:"email_to_user_id,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FrontendConfig) Reset()                    { *m = FrontendConfig{} }
func (m *FrontendConfig) String() string            { return proto1.CompactTextString(m) }
func (*FrontendConfig) ProtoMessage()               {}
func (*FrontendConfig) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *FrontendConfig) GetTcpProxyRoute() []*TCPProxyRoute {
	if m != nil {
		return m.TcpProxyRoute
	}
	return nil
}

func (m *FrontendConfig) GetBackend() []*FrontendConfig_Backend {
	if m != nil {
		return m.Backend
	}
	return nil
}

func (m *FrontendConfig) GetOauthConfig() *OauthConfig {
	if m != nil {
		return m.OauthConfig
	}
	return nil
}

func (m *FrontendConfig) GetEmailToUserId() map[string]string {
	if m != nil {
		return m.EmailToUserId
	}
	return nil
}

type FrontendConfig_Backend struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Types that are valid to be assigned to Security:
	//	*FrontendConfig_Backend_Tls
	//	*FrontendConfig_Backend_Insecure
	Security isFrontendConfig_Backend_Security `protobuf_oneof:"security"`
	PortKey  []byte                            `protobuf:"bytes,5,opt,name=port_key,proto3" json:"port_key,omitempty"`
}

func (m *FrontendConfig_Backend) Reset()                    { *m = FrontendConfig_Backend{} }
func (m *FrontendConfig_Backend) String() string            { return proto1.CompactTextString(m) }
func (*FrontendConfig_Backend) ProtoMessage()               {}
func (*FrontendConfig_Backend) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

type isFrontendConfig_Backend_Security interface {
	isFrontendConfig_Backend_Security()
}

type FrontendConfig_Backend_Tls struct {
	Tls *TLSConfig `protobuf:"bytes,3,opt,name=tls,oneof"`
}
type FrontendConfig_Backend_Insecure struct {
	Insecure bool `protobuf:"varint,4,opt,name=insecure,oneof"`
}

func (*FrontendConfig_Backend_Tls) isFrontendConfig_Backend_Security()      {}
func (*FrontendConfig_Backend_Insecure) isFrontendConfig_Backend_Security() {}

func (m *FrontendConfig_Backend) GetSecurity() isFrontendConfig_Backend_Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *FrontendConfig_Backend) GetTls() *TLSConfig {
	if x, ok := m.GetSecurity().(*FrontendConfig_Backend_Tls); ok {
		return x.Tls
	}
	return nil
}

func (m *FrontendConfig_Backend) GetInsecure() bool {
	if x, ok := m.GetSecurity().(*FrontendConfig_Backend_Insecure); ok {
		return x.Insecure
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FrontendConfig_Backend) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _FrontendConfig_Backend_OneofMarshaler, _FrontendConfig_Backend_OneofUnmarshaler, _FrontendConfig_Backend_OneofSizer, []interface{}{
		(*FrontendConfig_Backend_Tls)(nil),
		(*FrontendConfig_Backend_Insecure)(nil),
	}
}

func _FrontendConfig_Backend_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*FrontendConfig_Backend)
	// security
	switch x := m.Security.(type) {
	case *FrontendConfig_Backend_Tls:
		b.EncodeVarint(3<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Tls); err != nil {
			return err
		}
	case *FrontendConfig_Backend_Insecure:
		t := uint64(0)
		if x.Insecure {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto1.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("FrontendConfig_Backend.Security has unexpected type %T", x)
	}
	return nil
}

func _FrontendConfig_Backend_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*FrontendConfig_Backend)
	switch tag {
	case 3: // security.tls
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(TLSConfig)
		err := b.DecodeMessage(msg)
		m.Security = &FrontendConfig_Backend_Tls{msg}
		return true, err
	case 4: // security.insecure
		if wire != proto1.WireVarint {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Security = &FrontendConfig_Backend_Insecure{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _FrontendConfig_Backend_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*FrontendConfig_Backend)
	// security
	switch x := m.Security.(type) {
	case *FrontendConfig_Backend_Tls:
		s := proto1.Size(x.Tls)
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *FrontendConfig_Backend_Insecure:
		n += proto1.SizeVarint(4<<3 | proto1.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TCPProxyRoute struct {
	Listen string `protobuf:"bytes,1,opt,name=listen" json:"listen,omitempty"`
	Dial   string `protobuf:"bytes,2,opt,name=dial" json:"dial,omitempty"`
}

func (m *TCPProxyRoute) Reset()                    { *m = TCPProxyRoute{} }
func (m *TCPProxyRoute) String() string            { return proto1.CompactTextString(m) }
func (*TCPProxyRoute) ProtoMessage()               {}
func (*TCPProxyRoute) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

type OauthConfig struct {
	ClientId     string `protobuf:"bytes,1,opt,name=client_id" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret" json:"client_secret,omitempty"`
	RedirectUrl  string `protobuf:"bytes,3,opt,name=redirect_url" json:"redirect_url,omitempty"`
	StateKey     []byte `protobuf:"bytes,4,opt,name=state_key,proto3" json:"state_key,omitempty"`
}

func (m *OauthConfig) Reset()                    { *m = OauthConfig{} }
func (m *OauthConfig) String() string            { return proto1.CompactTextString(m) }
func (*OauthConfig) ProtoMessage()               {}
func (*OauthConfig) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func init() {
	proto1.RegisterType((*FrontendConfig)(nil), "fproxy.FrontendConfig")
	proto1.RegisterType((*FrontendConfig_Backend)(nil), "fproxy.FrontendConfig.Backend")
	proto1.RegisterType((*TCPProxyRoute)(nil), "fproxy.TCPProxyRoute")
	proto1.RegisterType((*OauthConfig)(nil), "fproxy.OauthConfig")
}

var fileDescriptor3 = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0xed, 0x6e, 0xd3, 0x40,
	0x10, 0xc4, 0x4d, 0x1a, 0x3b, 0xeb, 0x98, 0x94, 0xa5, 0x20, 0x93, 0x22, 0x28, 0x41, 0xa0, 0xf2,
	0x27, 0xa0, 0x22, 0xa1, 0x0a, 0x84, 0x04, 0xad, 0x8a, 0x88, 0x40, 0xa2, 0xba, 0xb6, 0x7f, 0xf8,
	0x63, 0xb9, 0xf6, 0x85, 0x9e, 0xe2, 0xfa, 0xa2, 0xf3, 0xb9, 0xc2, 0x4f, 0xc1, 0x13, 0xf0, 0x92,
	0x3c, 0x01, 0xf7, 0xe5, 0x24, 0x15, 0xe2, 0x57, 0x76, 0x67, 0x67, 0xf6, 0x6e, 0xe6, 0x1c, 0xd8,
	0x59, 0x08, 0x2e, 0xf9, 0xcb, 0x99, 0xe0, 0xa5, 0xa4, 0x65, 0x9e, 0x64, 0xbc, 0x9c, 0xb1, 0x1f,
	0x13, 0x83, 0x62, 0x6f, 0xa6, 0x7e, 0x7f, 0x36, 0xa3, 0xa1, 0x25, 0xc9, 0xa2, 0xb2, 0x83, 0xf1,
	0x9f, 0x2e, 0xdc, 0xfe, 0xe4, 0x24, 0x47, 0x46, 0x81, 0xef, 0x61, 0x28, 0xb3, 0x45, 0x62, 0x04,
	0x89, 0xe0, 0xb5, 0xa4, 0xb1, 0xb7, 0xdb, 0xd9, 0x0b, 0xf7, 0xef, 0x4d, 0xec, 0x96, 0xc9, 0xd9,
	0xd1, 0xc9, 0x89, 0x2e, 0x88, 0x1e, 0x92, 0x48, 0xb1, 0x57, 0x2d, 0x3e, 0x86, 0xb0, 0xa2, 0xe2,
	0x9a, 0x8a, 0x24, 0xcd, 0x73, 0x11, 0x6f, 0xec, 0x7a, 0x7b, 0x7d, 0x02, 0x16, 0xfa, 0xa8, 0x10,
	0x3c, 0x00, 0xff, 0x22, 0xcd, 0xe6, 0xea, 0xc0, 0xb8, 0x63, 0xf6, 0x3e, 0x6a, 0xf7, 0xde, 0xbc,
	0xc8, 0xe4, 0xd0, 0xb2, 0x48, 0x4b, 0xc7, 0x37, 0x30, 0xe0, 0x69, 0x2d, 0x2f, 0x9d, 0xb7, 0xb8,
	0xab, 0x76, 0x87, 0xfb, 0x77, 0x5b, 0xf9, 0x37, 0x3d, 0xb3, 0x5a, 0x12, 0xf2, 0x55, 0x83, 0xcf,
	0x61, 0xe8, 0x64, 0x7c, 0xce, 0x68, 0x32, 0xa7, 0x4d, 0xbc, 0xa9, 0xa4, 0x03, 0x12, 0x59, 0x92,
	0x46, 0xbf, 0xd0, 0x06, 0x5f, 0xc1, 0xf6, 0x3a, 0x8f, 0x95, 0x15, 0xcd, 0x6a, 0x41, 0xe3, 0x9e,
	0x22, 0x07, 0x04, 0x57, 0xe4, 0xa9, 0x9b, 0x20, 0x81, 0x2d, 0x7a, 0x95, 0xb2, 0x22, 0x91, 0x3c,
	0xa9, 0x95, 0xc7, 0x84, 0xe5, 0xb1, 0x6f, 0x4c, 0xbd, 0xf8, 0x8f, 0xa9, 0x63, 0x4d, 0x3f, 0xe3,
	0xe7, 0x8a, 0x3c, 0xcd, 0x8f, 0x4b, 0x29, 0x1a, 0x12, 0xd1, 0x75, 0x6c, 0xf4, 0xdb, 0x03, 0xdf,
	0x59, 0x47, 0x84, 0xee, 0x25, 0xaf, 0xa4, 0x7a, 0x00, 0x9d, 0xa2, 0xa9, 0x35, 0x56, 0xa6, 0x57,
	0xd4, 0x25, 0x6b, 0x6a, 0x7c, 0x06, 0x1d, 0xf5, 0xa6, 0x2a, 0x4f, 0x1d, 0xc8, 0x9d, 0xe5, 0x3b,
	0x7d, 0x3d, 0xb5, 0xa7, 0x7e, 0xbe, 0x45, 0xf4, 0x1c, 0x1f, 0x42, 0xb0, 0x34, 0xa5, 0xc3, 0x0b,
	0xd4, 0x60, 0x89, 0xe0, 0x03, 0x08, 0x16, 0x5c, 0xc8, 0xb5, 0x7c, 0x7c, 0xdd, 0xab, 0x64, 0x0e,
	0x01, 0x02, 0x43, 0x62, 0xb2, 0x19, 0x7d, 0x00, 0xfc, 0xd7, 0x04, 0x6e, 0x41, 0x47, 0xeb, 0xec,
	0x45, 0x75, 0x89, 0xdb, 0xb0, 0x79, 0x9d, 0x16, 0x75, 0x7b, 0x51, 0xdb, 0xbc, 0xdd, 0x38, 0xf0,
	0xc6, 0xef, 0x20, 0xba, 0xf1, 0x09, 0xe1, 0x7d, 0xe8, 0x15, 0xac, 0x52, 0x29, 0x39, 0xbd, 0xeb,
	0xb4, 0xd5, 0x9c, 0xa5, 0x45, 0x6b, 0x55, 0xd7, 0xe3, 0x5f, 0x1e, 0x84, 0x6b, 0x2f, 0x8d, 0x3b,
	0xd0, 0xcf, 0x0a, 0x46, 0x4b, 0xa9, 0xb3, 0xb7, 0xf2, 0xc0, 0x02, 0xd3, 0x1c, 0x9f, 0x42, 0xe4,
	0x86, 0xea, 0xfa, 0x82, 0x4a, 0xb7, 0x69, 0x60, 0xc1, 0x53, 0x83, 0xe1, 0x13, 0x18, 0x08, 0x9a,
	0x33, 0x41, 0x33, 0x99, 0xd4, 0xa2, 0x30, 0x29, 0xf6, 0x49, 0xd8, 0x62, 0xe7, 0xa2, 0xd0, 0x87,
	0x54, 0x32, 0x95, 0xf6, 0xdb, 0xe9, 0x9a, 0x6c, 0x02, 0x03, 0xe8, 0x70, 0xfc, 0xef, 0x9b, 0xe6,
	0xcf, 0x74, 0xd1, 0x33, 0x3f, 0xaf, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x69, 0x3e, 0x64, 0x3e,
	0x8b, 0x03, 0x00, 0x00,
}
